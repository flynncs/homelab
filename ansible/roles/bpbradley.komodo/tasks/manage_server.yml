---
- name: Create Server with Komodo Core
  when: enable_server_management | bool
  block:
    - name: Set server address
      when: server_address is defined and (server_address | string | trim) | length > 0
      ansible.builtin.set_fact:
        _server_address: "{{ server_address }}"
    - name: Detect route to Komodo Core
      when: server_address is not defined or (server_address | string | trim) | length == 0
      block:
        - name: Ensure packages for route detection are present
          ansible.builtin.package:
            name:
              - "{{ 'iproute' if ansible_os_family == 'RedHat' else 'iproute2' }}"
              - >-
                {{ 'libc-bin' if ansible_os_family == 'Debian'
                  else 'glibc' if ansible_os_family in ['RedHat','Alpine']
                  else omit }}
            state: present
          become: true

        - name: Extract host from Komodo Core URL
          ansible.builtin.set_fact:
            _core_host: "{{ komodo_core_url | urlsplit('hostname') }}"

        - name: Resolve host address
          ansible.builtin.command: getent ahosts {{ _core_host }}
          register: host_lookup
          changed_when: false
          failed_when: false

        - name: Pick first IPv4
          ansible.builtin.set_fact:
            _core_dest_ip: "{{ host_lookup.stdout_lines
              | select('match', '^[0-9]+\\.')
              | map('split') | map('first') | first | default('') }}"

        - name: Fallback to default interface if something went wrong
          ansible.builtin.set_fact:
            detected_advertise_ip: "{{ ansible_default_ipv4.address }}"
          when: _core_dest_ip == ""

        - name: Determine source IP for routes to Komodo Core
          when: _core_dest_ip != ""
          block:
            - name: Get route details
              ansible.builtin.command: "ip -o route get {{ _core_dest_ip }}"
              register: route
              changed_when: false
              failed_when: route.rc != 0 or route.stdout | length == 0

            - name: Extract source IP from route
              ansible.builtin.set_fact:
                src_ip: >-
                  {{
                    (route.stdout.split()
                    | zip(route.stdout.split()[1:])
                    | selectattr(0, 'equalto', 'src')
                    | map(attribute='1')
                    | first) | default('')
                  }}

            - name: Set detected_advertise_ip fact
              ansible.builtin.set_fact:
                detected_advertise_ip: "{{ src_ip | default(ansible_default_ipv4.address) }}"

        - name: Set server_address to detected URL
          ansible.builtin.set_fact:
            _server_address: >-
              {{ (ssl_enabled | ternary('https', 'http'))
                ~ '://' ~ detected_advertise_ip ~ ':' ~ periphery_port }}

    - name: Check for existing server on Komodo Core
      check_mode: false
      changed_when: false
      delegate_to: localhost
      ansible.builtin.uri:
        url: "{{ komodo_core_url | trim('/') }}/read"
        method: POST
        headers:
          X-Api-Key: "{{ komodo_core_api_key }}"
          X-Api-Secret: "{{ komodo_core_api_secret }}"
        body_format: json
        body:
          type: "GetServer"
          params:
            server: "{{ server_name }}"
        status_code: [200, 500]
        return_content: true
      retries: 2
      delay: 5
      register: probe

    - name: Update server in Komodo Core
      when: not ansible_check_mode and probe.status == 200
      delegate_to: localhost
      ansible.builtin.uri:
        url: "{{ komodo_core_url | trim('/') }}/write"
        method: POST
        headers:
          X-Api-Key: "{{ komodo_core_api_key }}"
          X-Api-Secret: "{{ komodo_core_api_secret }}"
        body_format: json
        body:
          type: "UpdateServer"
          params:
            id: "{{ probe.json['_id']['$oid'] }}"
            config:
              address: "{{ _server_address }}"
              enabled: true
              passkey: "{{ server_passkey }}"
        status_code: 200
        return_content: true
      retries: 2
      delay: 5

    - name: Create server with Komodo Core
      when: not ansible_check_mode and probe.status == 500
      delegate_to: localhost
      ansible.builtin.uri:
        url: "{{ komodo_core_url | trim('/') }}/write"
        method: POST
        headers:
          X-Api-Key: "{{ komodo_core_api_key }}"
          X-Api-Secret: "{{ komodo_core_api_secret }}"
        body_format: json
        body:
          type: "CreateServer"
          params:
            name: "{{ server_name }}"
            config:
              address: "{{ _server_address }}"
              enabled: true
              passkey: "{{ server_passkey }}"
        status_code: 200
        return_content: true
      retries: 2
      delay: 5
